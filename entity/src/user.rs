//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "user")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i64,
    pub name: String,
    pub discriminator: Option<i32>,
    pub global_name: Option<String>,
    pub bot: Option<bool>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::guild::Entity")]
    Guild,
    #[sea_orm(has_many = "super::message::Entity")]
    Message,
    #[sea_orm(has_many = "super::user_emoji::Entity")]
    UserEmoji,
}

impl Related<super::message::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Message.def()
    }
}

impl Related<super::user_emoji::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserEmoji.def()
    }
}

impl Related<super::guild::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_emoji::Relation::Guild.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_emoji::Relation::User.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
